Apache Kafka Setup
-------------------------------------

Download kafka: https://kafka.apache.org/downloads

download scala2.12 from binary downloads

extract the same. Copy the folder to any other drive and rename it to kafka.

Let's Start the zeekooper server to work with apache kafka.

open cmd and move to the kafka folder and execute command

.\bin\windows\zookeeper-server-start.bat .\config\zookeeper.properties


Open another cmd move to the kafka folder and execute below mentioned command:

.\bin\windows\kafka-server-start.bat .\config\server.properties

Let's create an application (springboot) with 3 dependencies.

1. spring web
2. Spring for apache kafka
3. Spring for apache kafka streams.

import project in Eclipse.

Let's create a producer Configuration to send messages.

package com.allstate.apachekafka;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;

@Configuration
public class ApacheProducerConfig {

	@Bean
	public ProducerFactory<String, String> producerFactory(){
		
		Map<String , Object> map= new HashMap<>();
		map.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG	, "localhost:9092");
		map.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
		map.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
		
		return new DefaultKafkaProducerFactory<>(map);
	}
	@Bean
	public KafkaTemplate<String, String> kafkaTemplate(){
		return new KafkaTemplate<>(producerFactory());
	}
}

____________________________________________________________________________

Create ConsumerConfiguration to listen messages send by Producer.

package com.allstate.apachekafka;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;


@Configuration
public class ApacheConsumerConfig {

	@Bean
	public ConsumerFactory<String, String> consumerFactory(){
		
		Map<String , Object> map= new HashMap<>();
		map.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG	, "localhost:9092");
		map.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
		map.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,StringDeserializer.class);
		map.put(ConsumerConfig.GROUP_ID_CONFIG, "group-id");
		
		return new DefaultKafkaConsumerFactory<>(map);
	}
	@Bean
	public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListener(){
		return new ConcurrentKafkaListenerContainerFactory<>();
	}
}

_____________________________________________________________________________

Main controller to send message

package com.allstate.apachekafka;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MainController {

	@Autowired
	KafkaTemplate<String, String> kafkaTemplate;
	
	@RequestMapping("/send")
	public String sendMessage() {
		
		kafkaTemplate.send("GENERAL", "Hello From Apache Kafka");
		
		return "please check your console";
	}
}

______________________________________________________________________

edit the main method class to enable kafka and also configure listener to listen to the messages.

package com.allstate.apachekafka;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.annotation.KafkaListener;

@SpringBootApplication
@EnableKafka
public class ApachekafkaApplication {

	public static void main(String[] args) {
		SpringApplication.run(ApachekafkaApplication.class, args);
	}

	@KafkaListener(topics = "GENERAL", groupId = "group-id")
	public void listener(String message) {
		System.out.println("Message Received: "+message);
	}
}

